/**
 * EJEMPLOS DE USO DEL SISTEMA DE CATERING A√âREO
 * 
 * Este archivo contiene ejemplos pr√°cticos de c√≥mo usar
 * las funciones del sistema de Pick & Pack para catering a√©reo
 */

import {
  // Funciones de inicializaci√≥n
  initializeFirebaseData,
  initializeIfEmpty,
  printStatistics,
  
  // Funciones de aerol√≠neas
  createAerolinea,
  getAerolinea,
  getAllAerolineas,
  
  // Funciones de productos
  createProducto,
  getProductosByCategoria,
  
  // Funciones de pedidos
  createPedidoCatering,
  validarPoliticasAlcohol,
  updatePedidoCatering,
  getPedidosByAerolinea,
  
  // Funciones de inventario
  createInventario,
  actualizarStockPorPedido,
  getProductosStockBajo,
  getInventarioByProducto
} from './firebase/utils';

import { calcularVolumenTotalAlcohol } from './data/products';
import { generarIdPedido } from './data/orders';
import type { PedidoCatering, Aerolinea, Producto } from './types';

// ============================================
// EJEMPLO 1: INICIALIZAR EL SISTEMA
// ============================================

export async function ejemplo1_Inicializar() {
  console.log('üìö EJEMPLO 1: Inicializar Firebase con datos\n');
  
  // Opci√≥n A: Inicializar solo si est√° vac√≠o (recomendado)
  const inicializado = await initializeIfEmpty();
  
  if (inicializado) {
    console.log('‚úÖ Firebase inicializado con √©xito');
    printStatistics();
  } else {
    console.log('‚ÑπÔ∏è Firebase ya ten√≠a datos');
  }
  
  // Opci√≥n B: Forzar inicializaci√≥n (cuidado con duplicados)
  // await initializeFirebaseData();
}

// ============================================
// EJEMPLO 2: CONSULTAR AEROL√çNEAS Y SUS POL√çTICAS
// ============================================

export async function ejemplo2_ConsultarAerolineas() {
  console.log('\nüìö EJEMPLO 2: Consultar pol√≠ticas de aerol√≠neas\n');
  
  // Obtener todas las aerol√≠neas
  const aerolineas = await getAllAerolineas();
  console.log(`Total de aerol√≠neas: ${aerolineas.length}`);
  
  // Consultar una aerol√≠nea espec√≠fica
  const americanAirlines = await getAerolinea('AA');
  
  if (americanAirlines) {
    console.log('\n‚úàÔ∏è American Airlines:');
    console.log(`  - L√≠mite de alcohol: ${americanAirlines.politicasAlcohol.maxVolumenPorPasajero}L`);
    console.log(`  - Empaque: ${americanAirlines.politicasAlcohol.requisitosEmpaque}`);
    console.log(`  - Destinos prohibidos: ${americanAirlines.politicasAlcohol.destinosProhibidos.join(', ')}`);
    console.log(`  - Documentaci√≥n: ${americanAirlines.politicasAlcohol.documentacionRequerida.join(', ')}`);
  }
}

// ============================================
// EJEMPLO 3: BUSCAR PRODUCTOS POR CATEGOR√çA
// ============================================

export async function ejemplo3_BuscarProductos() {
  console.log('\nüìö EJEMPLO 3: Buscar productos por categor√≠a\n');
  
  // Obtener bebidas alcoh√≥licas
  const bebidasAlcoholicas = await getProductosByCategoria('BebidasAlcoholicas');
  
  console.log(`üç∑ Bebidas alcoh√≥licas disponibles: ${bebidasAlcoholicas.length}`);
  bebidasAlcoholicas.forEach((bebida: Producto) => {
    console.log(`  - ${bebida.nombre} (${bebida.marca}): ${bebida.gradosAlcohol}% alcohol, ${bebida.tamano}${bebida.unidadMedida}`);
  });
  
  // Obtener equipo de cabina
  const equipoCabina = await getProductosByCategoria('EquipoCabina');
  console.log(`\nüç¥ Equipo de cabina disponible: ${equipoCabina.length}`);
  equipoCabina.forEach((equipo: Producto) => {
    console.log(`  - ${equipo.nombre}: Stock m√≠n ${equipo.stockMinimo}, m√°x ${equipo.stockMaximo}`);
  });
}

// ============================================
// EJEMPLO 4: CREAR Y VALIDAR UN PEDIDO
// ============================================

export async function ejemplo4_CrearYValidarPedido() {
  console.log('\nüìö EJEMPLO 4: Crear y validar un nuevo pedido\n');
  
  // Crear un nuevo pedido
  const nuevoPedido: PedidoCatering = {
    idPedido: generarIdPedido('AA', 'AA500', '2025-11-20'),
    aerolinea: 'AA',
    vuelo: 'AA500',
    fecha: '2025-11-20',
    origen: 'MIA',
    destino: 'LAX',
    items: [
      {
        categoria: 'BebidasAlcoholicas',
        productoId: 'LIQU_1001',
        nombre: 'Whisky Chivas Regal 12 a√±os',
        marca: 'Chivas',
        cantidad: 3,
        volumenUnitario: 0.75,
        contenidoAlcohol: 40
      },
      {
        categoria: 'BebidasAlcoholicas',
        productoId: 'LIQU_1007',
        nombre: 'Cerveza Heineken',
        cantidad: 50,
        volumenUnitario: 0.33,
        contenidoAlcohol: 5
      },
      {
        categoria: 'BebidasNoAlcoholicas',
        productoId: 'BEB_2001',
        nombre: 'Agua Mineral Evian',
        cantidad: 100
      },
      {
        categoria: 'Snacks',
        productoId: 'SNK_3001',
        nombre: 'Mix de Nueces Premium',
        cantidad: 80
      }
    ],
    volumenTotalAlcohol: calcularVolumenTotalAlcohol([
      { productoId: 'LIQU_1001', cantidad: 3 },
      { productoId: 'LIQU_1007', cantidad: 50 }
    ]),
    estado: 'pendiente'
  };
  
  console.log('üì¶ Creando pedido:', nuevoPedido.idPedido);
  console.log(`   Vuelo: ${nuevoPedido.vuelo} (${nuevoPedido.origen} ‚Üí ${nuevoPedido.destino})`);
  console.log(`   Total √≠tems: ${nuevoPedido.items.length}`);
  console.log(`   Volumen alcohol: ${nuevoPedido.volumenTotalAlcohol}L`);
  
  // Validar el pedido antes de crearlo
  const validacion = await validarPoliticasAlcohol(nuevoPedido);
  
  if (validacion.valido) {
    console.log('\n‚úÖ Validaci√≥n exitosa. El pedido cumple con todas las pol√≠ticas.');
    
    // Crear el pedido en Firebase
    await createPedidoCatering(nuevoPedido);
    console.log('‚úÖ Pedido creado en Firebase');
  } else {
    console.log('\n‚ùå Validaci√≥n fallida. Errores encontrados:');
    validacion.errores.forEach(error => console.log(`   - ${error}`));
  }
}

// ============================================
// EJEMPLO 5: PEDIDO A DESTINO PROHIBIDO
// ============================================

export async function ejemplo5_PedidoDestinoProhibido() {
  console.log('\nüìö EJEMPLO 5: Intentar pedido a destino prohibido\n');
  
  const pedidoProhibido: PedidoCatering = {
    idPedido: generarIdPedido('AA', 'AA888', '2025-11-25'),
    aerolinea: 'AA',
    vuelo: 'AA888',
    fecha: '2025-11-25',
    origen: 'JFK',
    destino: 'IR', // Ir√°n - destino prohibido
    items: [
      {
        categoria: 'BebidasAlcoholicas',
        productoId: 'LIQU_1001',
        nombre: 'Whisky Chivas Regal',
        cantidad: 2,
        volumenUnitario: 0.75,
        contenidoAlcohol: 40
      }
    ],
    volumenTotalAlcohol: 1.5,
    estado: 'pendiente'
  };
  
  console.log('üì¶ Intentando crear pedido a destino prohibido:');
  console.log(`   Vuelo: ${pedidoProhibido.vuelo} (${pedidoProhibido.origen} ‚Üí ${pedidoProhibido.destino})`);
  
  const validacion = await validarPoliticasAlcohol(pedidoProhibido);
  
  if (validacion.valido) {
    console.log('‚úÖ Pedido v√°lido');
  } else {
    console.log('\n‚ùå Validaci√≥n fallida como se esperaba:');
    validacion.errores.forEach(error => console.log(`   - ${error}`));
  }
}

// ============================================
// EJEMPLO 6: ACTUALIZAR INVENTARIO
// ============================================

export async function ejemplo6_GestionarInventario() {
  console.log('\nüìö EJEMPLO 6: Gestionar inventario\n');
  
  // Ver inventario actual de un producto
  const productoId = 'LIQU_1001';
  const inventarios = await getInventarioByProducto(productoId);
  
  console.log(`üìä Inventario de ${productoId}:`);
  inventarios.forEach(inv => {
    console.log(`   ${inv.ubicacion}: ${inv.cantidadDisponible} unidades`);
    if (inv.alertaStock) {
      console.log(`   ‚ö†Ô∏è ALERTA: Stock bajo!`);
    }
  });
  
  // Verificar productos con stock bajo
  const stockBajo = await getProductosStockBajo();
  
  if (stockBajo.length > 0) {
    console.log(`\n‚ö†Ô∏è Productos con stock bajo: ${stockBajo.length}`);
    stockBajo.forEach(({ producto, inventario }) => {
      console.log(`   - ${producto.nombre}: ${inventario.cantidadDisponible} unidades en ${inventario.ubicacion}`);
    });
  } else {
    console.log('\n‚úÖ Todos los productos tienen stock adecuado');
  }
}

// ============================================
// EJEMPLO 7: ACTUALIZAR ESTADO DE PEDIDO
// ============================================

export async function ejemplo7_ActualizarEstadoPedido() {
  console.log('\nüìö EJEMPLO 7: Actualizar estado de pedido\n');
  
  const idPedido = 'PED_AA100_20251105';
  
  // Cambiar estado a "en preparaci√≥n"
  await updatePedidoCatering(idPedido, {
    estado: 'en_preparacion'
  });
  console.log(`‚úÖ Pedido ${idPedido} actualizado a: en_preparacion`);
  
  // Simular proceso de preparaci√≥n...
  console.log('   Preparando √≠tems...');
  
  // Cambiar estado a "listo"
  await updatePedidoCatering(idPedido, {
    estado: 'listo'
  });
  console.log(`‚úÖ Pedido ${idPedido} actualizado a: listo`);
}

// ============================================
// EJEMPLO 8: CONSULTAR PEDIDOS POR AEROL√çNEA
// ============================================

export async function ejemplo8_ConsultarPedidosPorAerolinea() {
  console.log('\nüìö EJEMPLO 8: Consultar pedidos por aerol√≠nea\n');
  
  const codigoAerolinea = 'AA';
  const pedidos = await getPedidosByAerolinea(codigoAerolinea);
  
  console.log(`‚úàÔ∏è Pedidos de ${codigoAerolinea}: ${pedidos.length}`);
  
  pedidos.forEach(pedido => {
    console.log(`\n   üì¶ ${pedido.vuelo} - ${pedido.estado}`);
    console.log(`      ${pedido.origen} ‚Üí ${pedido.destino}`);
    console.log(`      Fecha: ${new Date(pedido.fecha).toLocaleDateString()}`);
    console.log(`      √çtems: ${pedido.items.length}`);
    console.log(`      Alcohol: ${pedido.volumenTotalAlcohol}L`);
  });
}

// ============================================
// EJEMPLO 9: ACTUALIZAR STOCK DESPU√âS DE PEDIDO
// ============================================

export async function ejemplo9_ActualizarStockDespuesPedido() {
  console.log('\nüìö EJEMPLO 9: Actualizar stock despu√©s de despachar pedido\n');
  
  // Simular que un pedido fue despachado
  const pedidos = await getPedidosByAerolinea('AA');
  
  if (pedidos.length > 0) {
    const pedido = pedidos[0];
    
    console.log(`üì¶ Despachando pedido: ${pedido.idPedido}`);
    console.log(`   √çtems en el pedido: ${pedido.items.length}`);
    
    // Actualizar inventario
    await actualizarStockPorPedido(pedido);
    console.log('‚úÖ Stock actualizado para todos los productos');
    
    // Marcar como despachado
    await updatePedidoCatering(pedido.idPedido, {
      estado: 'despachado'
    });
    console.log('‚úÖ Pedido marcado como despachado');
  }
}

// ============================================
// FUNCI√ìN PARA EJECUTAR TODOS LOS EJEMPLOS
// ============================================

export async function ejecutarTodosLosEjemplos() {
  console.log('\nüöÄ EJECUTANDO TODOS LOS EJEMPLOS DEL SISTEMA\n');
  console.log('='.repeat(60));
  
  try {
    await ejemplo1_Inicializar();
    await ejemplo2_ConsultarAerolineas();
    await ejemplo3_BuscarProductos();
    await ejemplo4_CrearYValidarPedido();
    await ejemplo5_PedidoDestinoProhibido();
    await ejemplo6_GestionarInventario();
    await ejemplo7_ActualizarEstadoPedido();
    await ejemplo8_ConsultarPedidosPorAerolinea();
    await ejemplo9_ActualizarStockDespuesPedido();
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ TODOS LOS EJEMPLOS COMPLETADOS EXITOSAMENTE');
    console.log('='.repeat(60));
  } catch (error) {
    console.error('\n‚ùå Error ejecutando ejemplos:', error);
  }
}

// Exportar todos los ejemplos
export default {
  ejemplo1_Inicializar,
  ejemplo2_ConsultarAerolineas,
  ejemplo3_BuscarProductos,
  ejemplo4_CrearYValidarPedido,
  ejemplo5_PedidoDestinoProhibido,
  ejemplo6_GestionarInventario,
  ejemplo7_ActualizarEstadoPedido,
  ejemplo8_ConsultarPedidosPorAerolinea,
  ejemplo9_ActualizarStockDespuesPedido,
  ejecutarTodosLosEjemplos
};
